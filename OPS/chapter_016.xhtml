<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
	<title>ПРОГРАММИРОВАНИЕ - ВВЕДЕНИЕ В ПРОФЕССИЮ I: АЗЫ ПРОГРАММИРОВАНИЯ</title>
	<meta charset="utf-8" />
	<link rel="stylesheet" href="css/stylesheet.css" type="text/css" />
</head>
<body>
<section class="body-rw Chapter-rw" epub:type="bodymatter chapter">
<header>
	<h4>1.4.9. Перенаправление потоков ввода-вывода</h4>
</header>

<p>В системах семейства Unix запущенные программы общаются с внешним миром через так называемые <i><strong>потоки ввода-вывода</strong></i>; каждый такой поток позволяет получать извне (вводить) или, наоборот, передавать вовне (выводить) последовательность байтов, причём эти байты могут поступать с клавиатуры, из файла, из канала связи с другой программой, от аппаратного устройства или от партнёра по взаимодействию через компьютерную сеть; точно так же они могут выводиться на экран, в файл на диске, в канал связи, передаваться аппаратному устройству или уходить через компьютерную сеть на другую машину. Программа может одновременно работать с несколькими потоками ввода-вывода, различая их по номерам; эти номера называются <i><strong>дескрипторами</strong></i>.</p>

<p>Практически все программы в ОС Unix следуют соглашению, по которому поток ввода-вывода с дескриптором 0 объявляется потоком стандартного ввода, поток с дескриптором 1&#160;&#8212; потоком стандартного вывода и поток с дескриптором 2&#160;&#8212; потоком для вывода сообщений об ошибках. Осуществляя обмен данными через стандартные потоки, большинство программ не делает предположений о том, с чем на самом деле связан тот или иной поток. Это позволяет использовать одни и те же программы как для работы с терминалом, так и для чтения из файла и/или записи в файл. Командные интерпретаторы, в том числе классический Bourne Shell, предоставляют возможности для управления вводом-выводом запускаемых программ. Для этого используются символы &#60;, &#62;, &#62;&#62;, &#62;&#38; и | (см. табл. 1.2).</p>

<br/>
<p class="tabledescr">
	<small>Таблица 1.2. Примеры перенаправлений ввода-вывода</small>
</p>
<table width="100%">
	<tr>
		<td class="colw">cmd1&#160;&#62; file1</td>
		<td>запустить программу cmd1, направив её вывод в файл file1; если файл существует, он будет перезаписан с нуля, если не существует&#160;&#8212; будет создан</td>
	</tr>
	<tr>
		<td class="colw">cmd1&#160;&#62;&#62; file1</td>
		<td>запустить программу cmd1, дописав её вывод в конец файла file1; если файла не существует, он будет создан</td>
	</tr>
	<tr>
		<td class="colw">cmd2&#160;&#60; file2</td>
		<td>запустить программу cmd2, подав ей содержимое файла file2 в качестве стандартного ввода; если файла не существует, произойдёт ошибка</td>
	</tr>
	<tr>
		<td class="colw">cmd3&#160;&#62; file1&#160;&#60; file2</td>
		<td>запустить программу cmd3, перенаправив как ввод, так и вывод</td>
	</tr>
	<tr>
		<td class="colw">cmd1&#160;| cmd2</td>
		<td>запустить одновременно программы cmd1 и cmd2, подав данные со стандартного вывода первой на стандартный ввод второй (так называемый <i><strong>конвейер</strong></i>)</td>
	</tr>
	<tr>
		<td class="colw">cmd4 2&#62; errfile</td>
		<td>направить поток сообщений об ошибках в файл errfile</td>
	</tr>
	<tr>
		<td class="colw">cmd5 2&#62;&#38;1&#160;| cmd6</td>
		<td>объединить потоки стандартного вывода и вывода ошибок программы cmd5 и направить на стандартный ввод программы cmd6</td>
	</tr>
</table>
<br/><br/>

<p>Обычно в ОС Unix присутствует программа less, позволяющая постранично просматривать содержимое файлов, пользуясь клавишами &#171;стрелка вверх&#187;, &#171;стрелка вниз&#187;, PgUp, PgDn и др. для прокрутки. Эта же программа позволяет постранично просматривать текст, поданный ей на стандартный ввод. Использование программы less полезно в случае, если информация, выдаваемая какой-либо из запускаемых вами программ, не умещается на экран. Например, команда</p>

<br/>
<p class="codecite">
&#160;&#160;&#160;&#160;ls -lR | less<br/>
</p>
<br/>

<p>позволит вам просмотреть список всех файлов, находящихся в текущей директории и всех её поддиректориях.</p>

<p>Учтите, что многие программы выдают все сообщения об ошибках и предупреждения в стандартный поток ошибок. Чтобы просмотреть постранично сообщения такой программы (например, компилятора gcc), следует дать команду, объединяющую поток ошибок со стандартным потоком вывода и направляющую на вход программы less результат объединения:</p>

<br/>
<p class="codecite">
&#160;&#160;&#160;&#160;gcc -Wall -g myprog.c -o myprog 2&#62;&#38;1 | less<br/>
</p>
<br/>

<p>Отметим ещё один момент. Если по какой-то причине вам не интересен поток информации, выдаваемый какой-нибудь программой, вы можете перенаправить его в псевдоустройство &#47;dev&#47;null: всё, что туда направлено, просто исчезает. Например, следующая команда сформирует список всех файлов в вашей системе, за исключением тех каталогов, на чтение которых у неё не хватит прав; при этом все сообщения об ошибках будут проигнорированы:</p>

<br/>
<p class="codecite">
&#160;&#160;&#160;&#160;ls -l -R &#47; &#62; list.txt 2&#62; &#47;dev&#47;null<br/>
</p>
<br/>

</section>
</body>
</html>