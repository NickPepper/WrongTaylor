<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
	<title>ПРОГРАММИРОВАНИЕ - ВВЕДЕНИЕ В ПРОФЕССИЮ I: АЗЫ ПРОГРАММИРОВАНИЯ</title>
	<meta charset="utf-8" />
	<link rel="stylesheet" href="css/stylesheet.css" type="text/css" />
</head>
<body>
<section class="body-rw Chapter-rw" epub:type="bodymatter chapter">
<header>
	<h4>1.3.3. Внешние устройства</h4>
</header>

<p>Центральный процессор и память (оперативная и постоянная) по сути как раз и образуют то, что называется компьютером, но если бы у нас были только они, толку от такого компьютера было бы на удивление мало. Во-первых, компьютеру как-то нужно получать программы и данные из внешнего мира, а результаты работы каким-то образом отдавать обратно. Во-вторых, содержимое оперативной памяти мгновенно теряется при выключении питания, так что для сколько-нибудь долговременного и надёжного хранения информации она не годится. Ясно, что компьютеру нужны ещё какие-то устройства помимо оперативной памяти и процессора. В ранних компьютерных системах все устройства подключались непосредственно к центральному процессору, но очень быстро стало ясно, что это неудобно: для каждого нового устройства центральный процессор приходилось переделывать; между тем внешние устройства обычно гораздо проще, чем центральный процессор, и появляются, естественно, быстрее, чем новые процессоры. Кроме того, разнообразных внешних устройств слишком много. В центральном процессоре попросту технически невозможно организовать поддержку всех или хотя бы значительного количества таких устройств. Всё это привело к возникновению идеи <i><strong>общей шины</strong></i>, описанной выше.</p>

<p>Подключение внешних устройств к общей шине производится через <i><strong>контроллер</strong></i>&#160;&#8212; электронную схему, которая может взаимодействовать через шину с центральным процессором; все контроллеры делают это одинаково, вне зависимости от того, какими устройствами они управляют, то есть с точки зрения процессора все контроллеры оказываются &#171;на одно лицо&#187;. При этом &#171;другим концом&#187; каждый контроллер подключается непосредственно к своему внешнему устройству и осуществляет управление его работой. Взаимодействие центрального процессора с контроллером строится на уже знакомых нам операциях чтения и записи; более того, на некоторых архитектурах ячейки памяти и контроллеры находятся в одном общем пространстве адресов и оказываются взаимозаменяемы, то есть центральный процессор &#171;не знает&#187;, с чем он имеет дело&#160;&#8212; с настоящей памятью или с контроллером; впрочем, более популярен подход, когда контроллеры имеют отдельное пространство адресов <a epub:type="noteref" href="#n1_2_12">12</a>; в этом случае говорят об <i><strong>адресах портов ввода-вывода</strong></i>. Один контроллер может поддерживать один или больше таких &#171;портов&#187;, то есть при работе с шиной отзываться на несколько разных адресов. Операции чтения из порта ввода-вывода и записи в такой порт с точки зрения центрального процессора выглядят совершенно так же, как и операции чтения-записи ячеек памяти, но контроллеры, в отличие от ячеек памяти, присланные им в ходе &#171;записи&#187; значения не запоминают, а воспринимают их как предписания что-то сделать; в ходе &#171;чтения&#187; порта контроллеры выдают не какое-то заранее сохранённое значение, а такое значение, которое как-то связано с состоянием самого контроллера, то есть позволяет узнать, например, завершена ли очередная операция, готов ли контроллер к выполнению следующей операции, не обнаружены ли какие-либо неисправности и т. п.</p>

<p>Сколько портов поддерживает конкретный контроллер, какие ему можно отдавать предписания и каковы коды этих предписаний, что означают значения, которые прочитываются из его портов&#160;&#8212; всего этого центральный процессор не знает, потому что всё это зависит от конкретного контроллера, а для другого контроллера всё может быть совсем не так. Для работы с каждым конкретным контроллером нужна специальная программа, которая, как мы уже говорили, называется <i><strong>драйвером</strong></i>; выполняясь на центральном процессоре, программа-драйвер даёт команды записи и чтения портов ввода-вывода &#171;своего&#187; контроллера, решая поставленные ей задачи. Обычно драйвер является частью операционной системы или становится такой частью после его загрузки. Например, если пользователь запустил некую программу, а этой программе потребовалась запись в файл на диске, то для этого программа обратится к операционной системе с просьбой записать такие-то данные в такой-то файл, операционная система вычислит, в каком месте диска находится или должен находиться соответствующий файл, и, обратившись, в свою очередь, к драйверу (то есть фактически к своей обособленной части), потребует записать определённые данные в определённое место диска; после этого драйвер, вооружась имеющимся у него знанием возможностей контроллера диска, сначала выполнит несколько операций записи в порты ввода-вывода, что заставит контроллер начать операцию записи; затем, выполнив операции чтения из портов, узнает о результатах операции и сообщит о них операционной системе <a epub:type="noteref" href="#n1_2_13">13</a>.</p>


<aside epub:type="footnote" id="n1_2_12">
	<p>Фактически при этом в компьютере имеются две разные шины&#160;&#8212; одна для ячеек памяти, вторая для контроллеров.</p>
</aside>
<aside epub:type="footnote" id="n1_2_13">
	<p>На самом деле в случае с диском всё будет несколько сложнее; более подробное обсуждение происходящего оставим до части нашей книги, посвящённой операцион- ным системам.</p>
</aside>
</section>
</body>
</html>